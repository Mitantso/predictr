{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"predictr - Predict the Reliability predictr: predict + reliability, in other words: A tool to predict the reliability. The aim of this package is to provide state of the art tools for all kinds of Weibull analyses. predictr already includes many methods (see tables below). A guideline on when to use which method will be added soon. Main Features Parameter Estimation Uncensored two-parameter Weibull distribution Type I and type II right-censored two-parameter Weibull distribution Maximum Likelihood Estimation (MLE) Median Rank Regression (MRR) Bias-correction methods C4 method (reduced bias adjustment) Hirose and Ross method Non-Parametric Bootstrap correction (mean, median, trimmed mean) Parametric Bootstrap correction (mean, median, trimmed mean) Confidence bounds Beta-Binomial Bounds Monte-Carlo Pivotal Bounds Non-Parametric Bootstrap Bounds Parametric Bootstrap Bounds Fisher Bounds Likelihood Ratio Bounds Plots Weibull Probability Plots with all needed information on them Important Links PyPi Github Repository Documentation","title":"Home"},{"location":"#predictr-predict-the-reliability","text":"predictr: predict + reliability, in other words: A tool to predict the reliability. The aim of this package is to provide state of the art tools for all kinds of Weibull analyses. predictr already includes many methods (see tables below). A guideline on when to use which method will be added soon.","title":"predictr - Predict the Reliability"},{"location":"#main-features","text":"","title":"Main Features"},{"location":"#parameter-estimation","text":"Uncensored two-parameter Weibull distribution Type I and type II right-censored two-parameter Weibull distribution Maximum Likelihood Estimation (MLE) Median Rank Regression (MRR)","title":"Parameter Estimation"},{"location":"#bias-correction-methods","text":"C4 method (reduced bias adjustment) Hirose and Ross method Non-Parametric Bootstrap correction (mean, median, trimmed mean) Parametric Bootstrap correction (mean, median, trimmed mean)","title":"Bias-correction methods"},{"location":"#confidence-bounds","text":"Beta-Binomial Bounds Monte-Carlo Pivotal Bounds Non-Parametric Bootstrap Bounds Parametric Bootstrap Bounds Fisher Bounds Likelihood Ratio Bounds","title":"Confidence bounds"},{"location":"#plots","text":"Weibull Probability Plots with all needed information on them","title":"Plots"},{"location":"#important-links","text":"PyPi Github Repository Documentation","title":"Important Links"},{"location":"CHANGELOG/","text":"Change Log - predictr All notable changes to this project will be documented in this file. [Unreleased] - yyyy-mm-dd Template for next changes Added Changed Fixed [0.1.7] - 2020-12-29 Changed changed get_bx_percentile() to a classmethod [0.1.6] - 2020-12-29 Added Official changelog New static method get_bx_percentile() for Analysis class. You can now get the time values for given BX-lives Changed Argument \"bounds\" for Fisher bounds: 'fisher' -> 'fb'. This is more in line with the other confidence bounds","title":"Changelog"},{"location":"CHANGELOG/#change-log-predictr","text":"All notable changes to this project will be documented in this file.","title":"Change Log - predictr"},{"location":"CHANGELOG/#unreleased-yyyy-mm-dd","text":"Template for next changes","title":"[Unreleased] - yyyy-mm-dd"},{"location":"CHANGELOG/#added","text":"","title":"Added"},{"location":"CHANGELOG/#changed","text":"","title":"Changed"},{"location":"CHANGELOG/#fixed","text":"","title":"Fixed"},{"location":"CHANGELOG/#017-2020-12-29","text":"","title":"[0.1.7] - 2020-12-29"},{"location":"CHANGELOG/#changed_1","text":"changed get_bx_percentile() to a classmethod","title":"Changed"},{"location":"CHANGELOG/#016-2020-12-29","text":"","title":"[0.1.6] - 2020-12-29"},{"location":"CHANGELOG/#added_1","text":"Official changelog New static method get_bx_percentile() for Analysis class. You can now get the time values for given BX-lives","title":"Added"},{"location":"CHANGELOG/#changed_2","text":"Argument \"bounds\" for Fisher bounds: 'fisher' -> 'fb'. This is more in line with the other confidence bounds","title":"Changed"},{"location":"classes/","text":"Available classes Currently, there is only one class available in the predictr package. I will continue to add new classes in the near future. Analysis Analysis contains all necessary methods for the Weibull analysis. Default arguments and values This table provides information on alle arguments that are passed to the Analysis class. Parameter default value type description df None list of floats List of failures ds None list of floats List of suspensions (right-censored only) bounds None str Confidence bounce method to be used in mle() or mrr() bounds_type None str Setting for the bounds: either two-sided or one-sided show None bool If True, the Weibull probability plot will be plotted bcm None str Defines the bias-correction method in mle() cl 0.9 float Sets the confidence level when bounds are used bs_size 5000 int Number of bootstrap samples est_type 'median' str Sets the statistic to compute from the bootstrap samples plot_style 'ggplot' str Choose a style according to your needs. See matplotlib style references for more available styles. unit '-' str Unit of failures and suspensions, e.g. 's', 'ms', 'no. of cycle' etc. Important : df = None will raise an error. There has to be at least one failure. Parameter estimation methods One can use either the Maximum Likelihoof Estimation or Median Rank Regression. Maximum likelihood estimation (MLE): from predictr import Analysis prototype_a = Analysis(...) # create an instance prototype_a.mle() # use instance methods Median Rank Regression (MRR) from predictr import Analysis prototype_a = Analysis(...) # create an instance prototype_a.mrr() # use instance methods Bias-correction methods Since parameter estimation methods are only asymptotically unbiased (sample sizes -> \"infinity\"), bias-correction methods are useful when you have only a few failures. These methods correct the Weibull shape and scale parameter. The following table provides possible configurations. Bias-corrections for mrr() are not supported, yet. Bias-correction method mle() mrr() argument value config. statistic C4 aka 'reduced bias adjustment x - 'c4' - - Hirose and Ross method x - 'hrbu' - - Non-parametric Bootstrap correction x - 'np_bs' bs_size 'mean', 'median', 'trimmed_mean' Parametric Bootstrap correction x - 'p_bs' bs_size 'mean', 'median', 'trimmed_mean' Confidence bounds methods Analysis supports nearly all state of the art confidence bounds methods. confidence bounds mle() mrr() uncensored data censored data bounds_type argument value Beta-Binomial Bounds - x x x '2s', '1sl', '1su' 'bbb' Monte-Carlo Pivotal Bounds - x x x '2s', '1sl', '1su' 'mcpb' Non-Parametric Bootstrap Bounds x x x - '2s', '1sl', '1su' 'npbb' Parametric Bootstrap Bounds x x x - '2s', '1sl', '1su' 'pbb' Fisher Bounds x - x x '2s', '1sl', '1su' 'fb' Likelihood Ratio Bounds x - x x '2s', '1sl', '1su' 'lrb' Important : mle() and mrr() support only specific confidence bounds methods. For instance, you can't use Beta-Binomial Bounds with mle(). This will also raise an error. Use the table above to check, whether a combination of parameter estimation and confidence bounds method is supported. '2s': two-sided confidence bounds, '1su': upper confidence bounds, '1sl': lower confidence bounds. If Beta-Binomial Bounds are used, the lower bound represents the lower percentile bound at a specific time ((pctl) is added in the plot legend). If Fisher Bounds are used, the lower bound represents the lower time bound at a specific percentile. Examples Maximum Likelihood Estimation (MLE) Uncensored sample Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb',show=True) prototype_a.mle() Censored sample Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] suspensions = [1.9, 2.0, 2.0] prototype_a = Analysis(df=failures, ds=suspensions, bounds='lrb',show=True) prototype_a.mle() Median Rank Regression (MRR) Uncensored sample Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='bbb',show=True) prototype_a.mrr() Censored sample Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] suspensions = [1.9, 2.0, 2.0] prototype_a = Analysis(df=failures, ds=suspensions, bounds='mcpb',show=True) prototype_a.mrr() Bias-corrections As already mentioned, only mle() support bias-corrections. The samples in these examples are drawn from a two-parameter Weibull distribution with a shape parameter of 2.0 and a scale parameter of 1.0. Uncensored sample It is appearent that the estimates of beta and eta are now closer to the ground truth values. The dotted grey line in the plot is the \"biased\" MLE line, the bia-corrected line is blue. The legend contains all needed information. failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb', show=True, bcm='c4') prototype_a.mle() The estimates can for the Weibull parameters can be compared directly, since they are available as attributes print(f'biased beta: {prototype_a.beta:4f} --> bias-corrected beta: {prototype_a.beta_c4:4f}') Censored sample The data is type II right-censored. failures = [0.38760099164906514, 0.5867052007217437, 0.5878056753744406, 0.602290402929083, 0.6754829518358306, 0.7520219855697948] suspensions = [0.7520219855697948, 0.7520219855697948] prototype_a = Analysis(df=failures, ds=suspensions, bounds='lrb', show=True, bcm='hrbu') prototype_a.mle()","title":"Available classes"},{"location":"classes/#available-classes","text":"Currently, there is only one class available in the predictr package. I will continue to add new classes in the near future.","title":"Available classes"},{"location":"classes/#analysis","text":"Analysis contains all necessary methods for the Weibull analysis.","title":"Analysis"},{"location":"classes/#default-arguments-and-values","text":"This table provides information on alle arguments that are passed to the Analysis class. Parameter default value type description df None list of floats List of failures ds None list of floats List of suspensions (right-censored only) bounds None str Confidence bounce method to be used in mle() or mrr() bounds_type None str Setting for the bounds: either two-sided or one-sided show None bool If True, the Weibull probability plot will be plotted bcm None str Defines the bias-correction method in mle() cl 0.9 float Sets the confidence level when bounds are used bs_size 5000 int Number of bootstrap samples est_type 'median' str Sets the statistic to compute from the bootstrap samples plot_style 'ggplot' str Choose a style according to your needs. See matplotlib style references for more available styles. unit '-' str Unit of failures and suspensions, e.g. 's', 'ms', 'no. of cycle' etc. Important : df = None will raise an error. There has to be at least one failure.","title":"Default arguments and values"},{"location":"classes/#parameter-estimation-methods","text":"One can use either the Maximum Likelihoof Estimation or Median Rank Regression. Maximum likelihood estimation (MLE): from predictr import Analysis prototype_a = Analysis(...) # create an instance prototype_a.mle() # use instance methods Median Rank Regression (MRR) from predictr import Analysis prototype_a = Analysis(...) # create an instance prototype_a.mrr() # use instance methods","title":"Parameter estimation methods"},{"location":"classes/#bias-correction-methods","text":"Since parameter estimation methods are only asymptotically unbiased (sample sizes -> \"infinity\"), bias-correction methods are useful when you have only a few failures. These methods correct the Weibull shape and scale parameter. The following table provides possible configurations. Bias-corrections for mrr() are not supported, yet. Bias-correction method mle() mrr() argument value config. statistic C4 aka 'reduced bias adjustment x - 'c4' - - Hirose and Ross method x - 'hrbu' - - Non-parametric Bootstrap correction x - 'np_bs' bs_size 'mean', 'median', 'trimmed_mean' Parametric Bootstrap correction x - 'p_bs' bs_size 'mean', 'median', 'trimmed_mean'","title":"Bias-correction methods"},{"location":"classes/#confidence-bounds-methods","text":"Analysis supports nearly all state of the art confidence bounds methods. confidence bounds mle() mrr() uncensored data censored data bounds_type argument value Beta-Binomial Bounds - x x x '2s', '1sl', '1su' 'bbb' Monte-Carlo Pivotal Bounds - x x x '2s', '1sl', '1su' 'mcpb' Non-Parametric Bootstrap Bounds x x x - '2s', '1sl', '1su' 'npbb' Parametric Bootstrap Bounds x x x - '2s', '1sl', '1su' 'pbb' Fisher Bounds x - x x '2s', '1sl', '1su' 'fb' Likelihood Ratio Bounds x - x x '2s', '1sl', '1su' 'lrb' Important : mle() and mrr() support only specific confidence bounds methods. For instance, you can't use Beta-Binomial Bounds with mle(). This will also raise an error. Use the table above to check, whether a combination of parameter estimation and confidence bounds method is supported. '2s': two-sided confidence bounds, '1su': upper confidence bounds, '1sl': lower confidence bounds. If Beta-Binomial Bounds are used, the lower bound represents the lower percentile bound at a specific time ((pctl) is added in the plot legend). If Fisher Bounds are used, the lower bound represents the lower time bound at a specific percentile.","title":"Confidence bounds methods"},{"location":"classes/#examples","text":"","title":"Examples"},{"location":"classes/#maximum-likelihood-estimation-mle","text":"","title":"Maximum Likelihood Estimation (MLE)"},{"location":"classes/#uncensored-sample","text":"Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb',show=True) prototype_a.mle()","title":"Uncensored sample"},{"location":"classes/#censored-sample","text":"Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] suspensions = [1.9, 2.0, 2.0] prototype_a = Analysis(df=failures, ds=suspensions, bounds='lrb',show=True) prototype_a.mle()","title":"Censored sample"},{"location":"classes/#median-rank-regression-mrr","text":"","title":"Median Rank Regression (MRR)"},{"location":"classes/#uncensored-sample_1","text":"Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='bbb',show=True) prototype_a.mrr()","title":"Uncensored sample"},{"location":"classes/#censored-sample_1","text":"Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] suspensions = [1.9, 2.0, 2.0] prototype_a = Analysis(df=failures, ds=suspensions, bounds='mcpb',show=True) prototype_a.mrr()","title":"Censored sample"},{"location":"classes/#bias-corrections","text":"As already mentioned, only mle() support bias-corrections. The samples in these examples are drawn from a two-parameter Weibull distribution with a shape parameter of 2.0 and a scale parameter of 1.0.","title":"Bias-corrections"},{"location":"classes/#uncensored-sample_2","text":"It is appearent that the estimates of beta and eta are now closer to the ground truth values. The dotted grey line in the plot is the \"biased\" MLE line, the bia-corrected line is blue. The legend contains all needed information. failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb', show=True, bcm='c4') prototype_a.mle() The estimates can for the Weibull parameters can be compared directly, since they are available as attributes print(f'biased beta: {prototype_a.beta:4f} --> bias-corrected beta: {prototype_a.beta_c4:4f}')","title":"Uncensored sample"},{"location":"classes/#censored-sample_2","text":"The data is type II right-censored. failures = [0.38760099164906514, 0.5867052007217437, 0.5878056753744406, 0.602290402929083, 0.6754829518358306, 0.7520219855697948] suspensions = [0.7520219855697948, 0.7520219855697948] prototype_a = Analysis(df=failures, ds=suspensions, bounds='lrb', show=True, bcm='hrbu') prototype_a.mle()","title":"Censored sample"},{"location":"get_started/","text":"Installation and Usage Step 1: Download Anaconda The easiest way to install Python is by downloading Anaconda (https://www.anaconda.com) for free. Anaconda comes with all essential packages and Python. You need Python 3 (3.6, 3.7, or 3.8 ) Step 2: Install predictr package Use the package manager pip to install predictr. pip install predictr Step 3: Use predictr in an IDE or text editor Anaconda comes with a bunch of pre-installed packages. Spyder is a very good IDE you can use to get started using Python. Open the Anaconda Navigator and install Spyder if necessary. Open Spyder and create a new file Import predictr in Spyder using: from predictr import Analysis Now you're able to use the Analysis class from predictr. For now, Analysis is the only class you can import. However, I will add new classes to predictr in the future.","title":"Get started"},{"location":"get_started/#installation-and-usage","text":"","title":"Installation and Usage"},{"location":"get_started/#step-1-download-anaconda","text":"The easiest way to install Python is by downloading Anaconda (https://www.anaconda.com) for free. Anaconda comes with all essential packages and Python. You need Python 3 (3.6, 3.7, or 3.8 )","title":"Step 1: Download Anaconda"},{"location":"get_started/#step-2-install-predictr-package","text":"Use the package manager pip to install predictr. pip install predictr","title":"Step 2: Install predictr package"},{"location":"get_started/#step-3-use-predictr-in-an-ide-or-text-editor","text":"Anaconda comes with a bunch of pre-installed packages. Spyder is a very good IDE you can use to get started using Python. Open the Anaconda Navigator and install Spyder if necessary. Open Spyder and create a new file Import predictr in Spyder using: from predictr import Analysis Now you're able to use the Analysis class from predictr. For now, Analysis is the only class you can import. However, I will add new classes to predictr in the future.","title":"Step 3: Use predictr in an IDE or text editor"}]}